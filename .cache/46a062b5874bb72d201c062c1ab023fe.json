{"dependencies":[],"generated":{"js":"/*!\n * jQuery.BgSwitcher\n *\n * @version  0.4.3\n * @author   rewish <rewish.org@gmail.com>\n * @license  MIT License (https://github.com/rewish/jquery-bgswitcher/blob/master/LICENSE.md)\n * @link     https://github.com/rewish/jquery-bgswitcher\n */\n(function($) {\n  'use strict';\n\n  var loadedImages = {},\n\n      slice = Array.prototype.slice,\n      toString = Object.prototype.toString,\n\n      corners = ['Top', 'Right', 'Bottom', 'Left'],\n      backgroundProperties = [\n        'Attachment', 'Color', 'Image', 'Repeat',\n        'Position', 'Size', 'Clip', 'Origin'\n      ];\n\n  $.fn.bgswitcher = function() {\n    var args = arguments,\n        instanceKey = BgSwitcher.keys.instance;\n\n    return this.each(function() {\n      var instance = $.data(this, instanceKey);\n\n      if (!instance) {\n        instance = new BgSwitcher(this);\n        $.data(this, instanceKey, instance);\n      }\n\n      instance.dispatch.apply(instance, args);\n    });\n  };\n\n  // Backward Compatibility\n  $.fn.bgSwitcher = $.fn.bgswitcher;\n\n  /**\n   * BgSwitcher\n   *\n   * @param {HTMLElement} el\n   * @constructor\n   */\n  function BgSwitcher(el) {\n    this.$el = $(el);\n    this.index = 0;\n    this.config = $.extend({}, BgSwitcher.defaultConfig);\n\n    this._setupBackgroundElement();\n    this._listenToResize();\n  }\n\n  $.extend(BgSwitcher.prototype, {\n    /**\n     * Dispatch\n     *\n     * @param {string|Array} one\n     */\n    dispatch: function(one) {\n      switch (toString.call(one)) {\n        case '[object Object]':\n          this.setConfig(one);\n          break;\n        case '[object String]':\n          this[one].apply(this, slice.call(arguments, 1));\n          break;\n        default:\n          throw new Error('Please specify a Object or String');\n      }\n    },\n\n    /**\n     * Set config\n     *\n     * @param {Object} config\n     */\n    setConfig: function(config) {\n      this.config = $.extend(this.config, config);\n\n      if (typeof this.config.random !== 'undefined') {\n        this.config.shuffle = this.config.random;\n      }\n\n      this.refresh();\n    },\n\n    /**\n     * Set images\n     *\n     * @param {Array} images\n     */\n    setImages: function(images) {\n      this.imageList = new this.constructor.ImageList(images);\n\n      if (this.config.shuffle) {\n        this.imageList.shuffle();\n      }\n    },\n\n    /**\n     * Set switch handler\n     *\n     * @param {Function} fn\n     */\n    setSwitchHandler: function(fn) {\n      this.switchHandler = $.proxy(fn, this);\n    },\n\n    /**\n     * Default switch handler\n     *\n     * @param {string} type\n     * @returns {Function}\n     */\n    getBuiltInSwitchHandler: function(type) {\n      return this.constructor.switchHandlers[type || this.config.effect];\n    },\n\n    /**\n     * Refresh\n     */\n    refresh: function() {\n      this.setImages(this.config.images);\n      this.setSwitchHandler(this.getBuiltInSwitchHandler());\n      this._prepareSwitching();\n\n      if (this.config.start) {\n        this.start();\n      }\n    },\n\n    /**\n     * Start switching\n     */\n    start: function() {\n      if (!this._timerID) {\n        this._timerID = setTimeout($.proxy(this, 'next'), this.config.interval);\n      }\n    },\n\n    /**\n     * Stop switching\n     */\n    stop: function() {\n      if (this._timerID) {\n        clearTimeout(this._timerID);\n        this._timerID = null;\n      }\n    },\n\n    /**\n     * Toggle between start/stop\n     */\n    toggle: function() {\n      if (this._timerID) {\n        this.stop();\n      } else {\n        this.start();\n      }\n    },\n\n    /**\n     * Reset switching\n     */\n    reset: function() {\n      this.index = 0;\n      this._prepareSwitching();\n    },\n\n    /**\n     * Go to next switching\n     */\n    next: function() {\n      var max = this.imageList.count();\n\n      if (!this.config.loop && this.index + 1 === max) {\n        return;\n      }\n\n      if (++this.index === max) {\n        this.index = 0;\n      }\n\n      this.switching();\n    },\n\n    /**\n     * Go to previous switching\n     */\n    prev: function() {\n      if (!this.config.loop && this.index === 0) {\n        return;\n      }\n\n      if (--this.index === -1) {\n        this.index = this.imageList.count() - 1;\n      }\n\n      this.switching();\n    },\n\n    /**\n     * Select the switching at index\n     *\n     * @param {number} index\n     */\n    select: function(index) {\n      if (index === -1) {\n        index = this.imageList.count() - 1;\n      }\n\n      this.index = index;\n      this.switching();\n    },\n\n    /**\n     * Switching the background image\n     */\n    switching: function() {\n      var started = !!this._timerID;\n\n      if (started) {\n        this.stop();\n      }\n\n      this._createSwitchableElement();\n      this._prepareSwitching();\n      this.switchHandler(this.$switchable);\n\n      if (started) {\n        this.start();\n      }\n    },\n\n    /**\n     * Destroy...\n     */\n    destroy: function() {\n      this.stop();\n      this._stopListeningToResize();\n\n      if (this.$switchable) {\n        this.$switchable.stop();\n        this.$switchable.remove();\n        this.$switchable = null;\n      }\n\n      if (this.$bg) {\n        this.$bg.remove();\n        this.$bg = null;\n      }\n\n      this.$el.removeAttr('style');\n      this.$el.removeData(this.constructor.keys.instance);\n      this.$el = null;\n    },\n\n    /**\n     * Adjust rectangle\n     */\n    _adjustRectangle: function() {\n      var corner,\n          i = 0,\n          length = corners.length,\n          offset = this.$el.position(),\n          copiedStyles = {\n            top: offset.top,\n            left: offset.left,\n            width: this.$el.innerWidth(),\n            height: this.$el.innerHeight()\n          };\n\n      for (; i < length; i++) {\n        corner = corners[i];\n        copiedStyles['margin' + corner] = this.$el.css('margin' + corner);\n        copiedStyles['border' + corner] = this.$el.css('border' + corner);\n      }\n\n      this.$bg.css(copiedStyles);\n    },\n\n    /**\n     * Setup background element\n     */\n    _setupBackgroundElement: function() {\n      this.$bg = $(document.createElement('div'));\n      this.$bg.css({\n        position: 'absolute',\n        zIndex: (parseInt(this.$el.css('zIndex'), 10) || 0) - 1,\n        overflow: 'hidden'\n      });\n\n      this._copyBackgroundStyles();\n      this._adjustRectangle();\n\n      if (this.$el[0].tagName === 'BODY') {\n        this.$el.prepend(this.$bg);\n      } else {\n        this.$el.before(this.$bg);\n        this.$el.css('background', 'none');\n      }\n    },\n\n    /**\n     * Create switchable element\n     */\n    _createSwitchableElement: function() {\n      if (this.$switchable) {\n        this.$switchable.remove();\n      }\n\n      this.$switchable = this.$bg.clone();\n      this.$switchable.css({top: 0, left: 0, margin: 0, border: 'none'});\n      this.$switchable.appendTo(this.$bg);\n    },\n\n    /**\n     * Copy background styles\n     */\n    _copyBackgroundStyles: function () {\n      var prop,\n          copiedStyle = {},\n          i = 0,\n          length = backgroundProperties.length,\n          backgroundPosition = 'backgroundPosition';\n\n      for (; i < length; i++) {\n        prop = 'background' + backgroundProperties[i];\n        copiedStyle[prop] = this.$el.css(prop);\n      }\n\n      // For IE<=9\n      if (copiedStyle[backgroundPosition] === undefined) {\n        copiedStyle[backgroundPosition] = [\n          this.$el.css(backgroundPosition + 'X'),\n          this.$el.css(backgroundPosition + 'Y')\n        ].join(' ');\n      }\n\n      this.$bg.css(copiedStyle);\n    },\n\n    /**\n     * Listen to the resize event\n     */\n    _listenToResize: function() {\n      var that = this;\n      this._resizeHandler = function() {\n        that._adjustRectangle();\n      };\n      $(window).on('resize', this._resizeHandler);\n    },\n\n    /**\n     * Stop listening to the resize event\n     */\n    _stopListeningToResize: function() {\n      $(window).off('resize', this._resizeHandler);\n      this._resizeHandler = null;\n    },\n\n    /**\n     * Prepare the Switching\n     */\n    _prepareSwitching: function() {\n      this.$bg.css('backgroundImage', this.imageList.url(this.index));\n    }\n  });\n\n  /**\n   * Data Keys\n   * @type {Object}\n   */\n  BgSwitcher.keys = {\n    instance: 'bgSwitcher'\n  };\n\n  /**\n   * Default Config\n   * @type {Object}\n   */\n  BgSwitcher.defaultConfig = {\n    images: [],\n    interval: 5000,\n    start: true,\n    loop: true,\n    shuffle: false,\n    effect: 'fade',\n    duration: 1000,\n    easing: 'swing'\n  };\n\n  /**\n   * Built-In switch handlers (effects)\n   * @type {Object}\n   */\n  BgSwitcher.switchHandlers = {\n    fade: function($el) {\n      $el.animate({opacity: 0}, this.config.duration, this.config.easing);\n    },\n\n    blind: function($el) {\n      $el.animate({height: 0}, this.config.duration, this.config.easing);\n    },\n\n    clip: function($el) {\n      $el.animate({\n        top: parseInt($el.css('top'), 10) + $el.height() / 2,\n        height: 0\n      }, this.config.duration, this.config.easing);\n    },\n\n    slide: function($el) {\n      $el.animate({top: -$el.height()}, this.config.duration, this.config.easing);\n    },\n\n    drop: function($el) {\n      $el.animate({\n        left: -$el.width(),\n        opacity: 0\n      }, this.config.duration, this.config.easing);\n    },\n\n    hide: function($el) {\n      $el.hide();\n    }\n  };\n\n  /**\n   * Define effect\n   *\n   * @param {String} name\n   * @param {Function} fn\n   */\n  BgSwitcher.defineEffect = function(name, fn) {\n    this.switchHandlers[name] = fn;\n  };\n\n  /**\n   * BgSwitcher.ImageList\n   *\n   * @param {Array} images\n   * @constructor\n   */\n  BgSwitcher.ImageList = function(images) {\n    this.images = images;\n    this.createImagesBySequence();\n    this.preload();\n  };\n\n  $.extend(BgSwitcher.ImageList.prototype, {\n    /**\n     * Images is sequenceable\n     *\n     * @returns {boolean}\n     */\n    isSequenceable: function() {\n      return typeof this.images[0] === 'string' &&\n          typeof this.images[1] === 'number' &&\n          typeof this.images[2] === 'number';\n    },\n\n    /**\n     * Create an images by sequence\n     */\n    createImagesBySequence: function() {\n      if (!this.isSequenceable()) {\n        return;\n      }\n\n      var images = [],\n          base = this.images[0],\n          min = this.images[1],\n          max = this.images[2];\n\n      do {\n        images.push(base.replace(/\\.\\w+$/, min + '$&'));\n      } while (++min <= max);\n\n      this.images = images;\n    },\n\n    /**\n     * Preload an images\n     */\n    preload: function() {\n      var path,\n          length = this.images.length,\n          i = 0;\n\n      for (; i < length; i++) {\n        path = this.images[i];\n        if (!loadedImages[path]) {\n          loadedImages[path] = new Image();\n          loadedImages[path].src = path;\n        }\n      }\n    },\n\n    /**\n     * Shuffle an images\n     */\n    shuffle: function() {\n      var j, t,\n          i = this.images.length,\n          original = this.images.join();\n\n      if (!i) {\n        return;\n      }\n\n      while (i) {\n        j = Math.floor(Math.random() * i);\n        t = this.images[--i];\n        this.images[i] = this.images[j];\n        this.images[j] = t;\n      }\n\n      if (this.images.join() === original) {\n        this.shuffle();\n      }\n    },\n\n    /**\n     * Get the image from index\n     *\n     * @param {number} index\n     * @returns {string}\n     */\n    get: function(index) {\n      return this.images[index];\n    },\n\n    /**\n     * Get the URL with function of CSS\n     *\n     * @param {number} index\n     * @returns {string}\n     */\n    url: function(index) {\n      return 'url(' + this.get(index) + ')';\n    },\n\n    /**\n     * Count of images\n     *\n     * @returns {number}\n     */\n    count: function() {\n      return this.images.length;\n    }\n  });\n\n  $.BgSwitcher = BgSwitcher;\n}(jQuery));\n"},"hash":"03636cdbb30772b084102ce8fbe8f05b"}